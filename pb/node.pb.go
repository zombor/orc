// Code generated by protoc-gen-go.
// source: pb/node.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RunCommandRequest struct {
	Command string            `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
	Params  map[string]string `protobuf:"bytes,2,rep,name=params" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RunCommandRequest) Reset()                    { *m = RunCommandRequest{} }
func (m *RunCommandRequest) String() string            { return proto.CompactTextString(m) }
func (*RunCommandRequest) ProtoMessage()               {}
func (*RunCommandRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *RunCommandRequest) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

type RunCommandResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Ok      bool   `protobuf:"varint,2,opt,name=ok" json:"ok,omitempty"`
}

func (m *RunCommandResponse) Reset()                    { *m = RunCommandResponse{} }
func (m *RunCommandResponse) String() string            { return proto.CompactTextString(m) }
func (*RunCommandResponse) ProtoMessage()               {}
func (*RunCommandResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func init() {
	proto.RegisterType((*RunCommandRequest)(nil), "pb.RunCommandRequest")
	proto.RegisterType((*RunCommandResponse)(nil), "pb.RunCommandResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for Node service

type NodeClient interface {
	RunCommand(ctx context.Context, in *RunCommandRequest, opts ...grpc.CallOption) (*RunCommandResponse, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) RunCommand(ctx context.Context, in *RunCommandRequest, opts ...grpc.CallOption) (*RunCommandResponse, error) {
	out := new(RunCommandResponse)
	err := grpc.Invoke(ctx, "/pb.Node/RunCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Node service

type NodeServer interface {
	RunCommand(context.Context, *RunCommandRequest) (*RunCommandResponse, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_RunCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RunCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(NodeServer).RunCommand(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunCommand",
			Handler:    _Node_RunCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor1 = []byte{
	// 221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x48, 0xd2, 0xcf,
	0xcb, 0x4f, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x5a, 0xcc,
	0xc8, 0x25, 0x18, 0x54, 0x9a, 0xe7, 0x9c, 0x9f, 0x9b, 0x9b, 0x98, 0x97, 0x12, 0x94, 0x5a, 0x58,
	0x9a, 0x5a, 0x5c, 0x22, 0x24, 0xc1, 0xc5, 0x9e, 0x0c, 0x11, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x0c, 0x82, 0x71, 0x85, 0x2c, 0xb9, 0xd8, 0x0a, 0x12, 0x8b, 0x12, 0x73, 0x8b, 0x25, 0x98, 0x14,
	0x98, 0x35, 0xb8, 0x8d, 0x14, 0xf5, 0x0a, 0x92, 0xf4, 0x30, 0x0c, 0xd0, 0x0b, 0x00, 0xab, 0x71,
	0xcd, 0x2b, 0x29, 0xaa, 0x0c, 0x82, 0x6a, 0x90, 0xb2, 0xe4, 0xe2, 0x46, 0x12, 0x16, 0x12, 0xe0,
	0x62, 0xce, 0x4e, 0xad, 0x84, 0x9a, 0x0f, 0x62, 0x0a, 0x89, 0x70, 0xb1, 0x96, 0x25, 0xe6, 0x94,
	0xa6, 0x02, 0x8d, 0x06, 0x89, 0x41, 0x38, 0x56, 0x4c, 0x16, 0x8c, 0x4a, 0x76, 0x5c, 0x42, 0xc8,
	0x76, 0x14, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x82, 0x5c, 0x99, 0x9b, 0x5a, 0x5c, 0x9c, 0x98, 0x9e,
	0x0a, 0x73, 0x25, 0x94, 0x2b, 0xc4, 0xc7, 0xc5, 0x94, 0x9f, 0x0d, 0x36, 0x86, 0x23, 0x08, 0xc8,
	0x32, 0x72, 0xe5, 0x62, 0xf1, 0x03, 0xfa, 0x5b, 0xc8, 0x96, 0x8b, 0x0b, 0x61, 0x8e, 0x90, 0x28,
	0x56, 0xb7, 0x4b, 0x89, 0xa1, 0x0b, 0x43, 0xac, 0x53, 0x62, 0x48, 0x62, 0x03, 0x87, 0x9b, 0x31,
	0x20, 0x00, 0x00, 0xff, 0xff, 0xd0, 0xd9, 0xf0, 0x7a, 0x48, 0x01, 0x00, 0x00,
}
