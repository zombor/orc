// Code generated by protoc-gen-go.
// source: pb/controller.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pb/controller.proto
	pb/node.proto

It has these top-level messages:
	RegisterNodeRequest
	NodeStatus
	RunCommandRequest
	RunCommandResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type RegisterNodeRequest struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (m *RegisterNodeRequest) Reset()                    { *m = RegisterNodeRequest{} }
func (m *RegisterNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterNodeRequest) ProtoMessage()               {}
func (*RegisterNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type NodeStatus struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *NodeStatus) Reset()                    { *m = NodeStatus{} }
func (m *NodeStatus) String() string            { return proto.CompactTextString(m) }
func (*NodeStatus) ProtoMessage()               {}
func (*NodeStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*RegisterNodeRequest)(nil), "pb.RegisterNodeRequest")
	proto.RegisterType((*NodeStatus)(nil), "pb.NodeStatus")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for Controller service

type ControllerClient interface {
	RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*NodeStatus, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*NodeStatus, error) {
	out := new(NodeStatus)
	err := grpc.Invoke(ctx, "/pb.Controller/RegisterNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Controller service

type ControllerServer interface {
	RegisterNode(context.Context, *RegisterNodeRequest) (*NodeStatus, error)
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RegisterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ControllerServer).RegisterNode(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNode",
			Handler:    _Controller_RegisterNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x48, 0xd2, 0x4f,
	0xce, 0xcf, 0x2b, 0x29, 0xca, 0xcf, 0xc9, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x62, 0x2a, 0x48, 0x52, 0x72, 0xe6, 0x12, 0x0e, 0x4a, 0x4d, 0xcf, 0x2c, 0x2e, 0x49, 0x2d, 0xf2,
	0xcb, 0x4f, 0x49, 0x0d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0xc9, 0x4b,
	0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x85, 0x24, 0xb8, 0xd8, 0x13,
	0x53, 0x52, 0x8a, 0x52, 0x8b, 0x8b, 0x25, 0x98, 0xc0, 0xc2, 0x30, 0xae, 0x92, 0x0c, 0x17, 0x17,
	0x48, 0x73, 0x70, 0x49, 0x62, 0x49, 0x69, 0xb1, 0x10, 0x1f, 0x17, 0x53, 0x7e, 0x36, 0x58, 0x27,
	0x47, 0x10, 0x90, 0x65, 0xe4, 0xce, 0xc5, 0xe5, 0x0c, 0xb7, 0x5a, 0xc8, 0x92, 0x8b, 0x07, 0xd9,
	0x42, 0x21, 0x71, 0xbd, 0x82, 0x24, 0x3d, 0x2c, 0x4e, 0x90, 0xe2, 0x03, 0x49, 0x20, 0x8c, 0x55,
	0x62, 0x48, 0x62, 0x03, 0x3b, 0xdb, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x4b, 0x9f, 0x37,
	0xcd, 0x00, 0x00, 0x00,
}
